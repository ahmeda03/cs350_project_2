Our group worked on this project by first meeting beforehand to work on the inital race condition to child-first after a fork task. 
We worked on this together and then divided the work based on each individual task in the assignment sheet. 
Throughout the project, we asked each other questions and gave updates through Discord.

Jenylee: My task was to allow the user progra mto set the type of scheduling policy where an argument of 0 meant a default policy and an argument of 1 was stride scheduling.
I was in charge of writing the system all user space wrapper function, void set_sched(int). I added this system call to all necessary files such as "syscall.c," "syscall.h," "sysproc.c," "usys.S," and "user.h." which was similar to the first project. After initializing it, I implemented the sys_sched system call iin the syspro.c file. I start off my initializing a global
variable called schedPolicy to keep track of the current scheduling policy with either 0 or 1. I used argint(0, &policyNum) to get the user's argument. I checked if the argument was valid
if it wasn't I returned a -1. Afterwards, if it was 0 or 1 I printed out the current scheduling policy and returned 0 to show success. 

Ahmed

Tu: I completed the transfer_tickets function part of the stride scheduling policy. Transfer_tickets followed the setting up a system call procedure. It was implemented in "proc.c". The end goal it accomplishes it succesfully transferring the tickets of the calling process to a target process if it exists along with boundary checking for number of tickets being sent. 

Thomas: My task was to implment stride scheduling policy where the CPU schedules processes based on the pass value of each process has. If there are multiple processes with the same pass value, the process with the lowest PID is selected and ran. All of the code that I was responsible for is loced in the "proc.c" file of xv6 under the "scheduler" function.

Purpose:

Functionality:



Thomas: The scheduler function in "proc.c" works in this fashion:
-depending on what value of schedPolicy, the CPU can either execute with round robin scheduling or stride scheduling.
-Assuming stride scheduling has been picked by the schedPolicy, initialize lowestPID and lowestPass to INT_MAX
-Find the process with the lowest pass and/or PID value is found by looping through the list of processes
-If the process is runnable, update the pass value of the process by adding its stride value to pass and set the ran variable to 1 before running the process
-Once the process returns to the scheduler, loop back up to step 3 with the process with the next lowest pass value
-Once all processes finish, release the ptable

Usage:



Thomas: Stride schduler is mainly used in tests 2, 4, and 5

Test cases that work/don't work:
